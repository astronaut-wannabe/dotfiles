#+STARTIP: overview

* Interface and UI tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (setq initial-scratch-message "")
    (tool-bar-mode -1)

    ;; spaces, not tabs
    (setq-default indent-tabs-mode nil)
    (setq tab-width 2)
    (setq-default tab-always-indent 'complete)

    ;; just have to type 'y' instead of 'yes'
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; hit f5 to reload buffer from file
    (global-set-key (kbd "<f5>") 'revert-buffer)

    ;; alias list-buffers to more useful mode
    ;; (defalias 'list-buffers 'ibuffer)
    (defalias 'list-buffers 'ibuffer-other-window)

    (use-package expand-region
      :ensure t
      :pin melpa
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    ;; frame title like: "[buffer-name] - Emacs 25.1.50.1"
    (setq frame-title-format '("" "[%b] - Emacs " emacs-version))

    ;; Highlight current line
    (global-hl-line-mode 1)

    ;; Swap the two comment commands so that it is easier to use the
    ;; one I always use
    (global-set-key (kbd "M-;") 'comment-line)
    (global-set-key (kbd "C-x C-;") 'comment-dwim)
  #+END_SRC

  The [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] package ensures environment variables
  inside Emacs are set up the same as my shell. The [[https://github.com/purcell/exec-path-from-shell#usage][docs]] recommend
  doing something like this:

  #+BEGIN_SRC emacs-lisp :eval never :tangle no :exports code
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
  #+END_SRC

  This will only run the package on OSX. I think this is done to
  prevent running on a non *nix box (windows). This isn't a concern
  for me since I am always on my work Mac or my personal Linux, so I
  just run:

  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :config
      (exec-path-from-shell-initialize))
  #+END_SRC
  
  Normally, hitting M-q will fold the paragraph in Emacs. I wanted to
  be able to unfold too. I was able to get that functionality from
  this [[http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html][Endless Parentheses post]].
  
  #+BEGIN_SRC emacs-lisp
    (defun aw/fill-or-unfill ()
      "Like `fill-paragraph', but unfill if used twice."
      (interactive)
      (let ((fill-column
             (if (eq last-command 'aw/fill-or-unfill)
                 (progn (setq this-command nil)
                        (point-max))
               fill-column)))
        (call-interactively #'fill-paragraph)))

    (global-set-key [remap fill-paragraph]
                    #'aw/fill-or-unfill)
  #+END_SRC

* enable "advanced" commands
  Sometimes I run into a command that Emacs has disabled by
  default. Here I enable some of the ones I actually use.
  #+BEGIN_SRC emacs-lisp
    (put 'narrow-to-region 'disabled nil)
  #+END_SRC
* Custom directory setup
  Set up some special directories to hold things like snippets, custom
  packages, etc.
  #+BEGIN_SRC emacs-lisp
    ;; In case this is the first time running this on a computer, we need to make sure the following directories have been created.
    (defconst mb/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))
    (defun mb/emacs-subdirectory (d) (expand-file-name d mb/emacs-directory))

    (let* ((subdirs '("elisp" "backups" "snippets" "ac-dict"))
           (fulldirs (mapcar (lambda (d) (mb/emacs-subdirectory d)) subdirs)))
      (dolist (dir fulldirs)
        (when (not (file-exists-p dir))
          (message "Make directory: %s" dir)
          (make-directory dir))))

    ;; Extra packages not available via the package manager go here
    (add-to-list 'load-path (mb/emacs-subdirectory "elisp"))

    ;; save all auto-backups in a single directory
    (setq backup-directory-alist
          `(("." . ,(expand-file-name
                     (mb/emacs-subdirectory "backups")))))
  #+END_SRC

* Autocomplete
  I like company-mode for autocomplete (over the
  autocomplete.el). This config block makes sure I use the melpa
  version, removes the minor-mode label from the mode-line, and turns
  on autocomplete everywhere.
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :pin melpa
      :ensure t
      :diminish company-mode
      :config
      (global-company-mode 1))
  #+END_SRC

* Buffer Navigation
  For jumping between open buffers I really like ace-window. I gave
  avy a try, but I go faster with ace window since I can memorize the
  jump key. The config removes the minor mode from the mode line, sets
  the jump keys to letters instead of numbers (the default), and makes
  the jump key prompt big and red.
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :diminish ace-window-mode
      :init
      (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l ?o))
      (global-set-key (kbd "C-x o") 'ace-window)
      (custom-set-faces '(aw-leading-char-face ((t (:foreground "red" :height 3.0))))))
  #+END_SRC

* Org Tweaks
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-image-actual-width (/ (display-pixel-width) 3)))

    (setq org-export-backends (quote (
                                      beamer
                                      html
                                      latex
                                      md
                                      deck
                                      scheme
                                      s5
                                      present
                                      tree-slide
                                      html5slide
                                      impress-js
                                      ioslide
                                      jira
                                      reveal
                                      tufte)))
  #+END_SRC
* Fuzzy Matching for prompts/commands
  I tried Helm once, but was overwhelmed. Ido works great especially
  with flx added.
  #+BEGIN_SRC emacs-lisp
    ;; better fuzzy matching for ido via flx
    (use-package flx-ido :ensure t)
    ;; set up ido for fuzzy auto-complete of everything (buffers, commands, etc.)
    (setq ido-enable-flex-matching t)
    (setq ido-use-faces nil)
    (ido-mode 1)
    (flx-ido-mode 1)
    (ido-everywhere 1)
  #+END_SRC

* Spell checking (ispell/aspell)
  I like to use aspell instead of ispell. Also, changing the
  dictionary to "American" (vs English) seems to result in better
  suggestions for me.
  #+BEGIN_SRC emacs-lisp
    (setq ispell-dictionary "american")
    (setq ispell-program-name "/usr/local/bin/aspell")
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
  #+END_SRC

* Flycheck
  Flycheck does code checking "on the fly". It has an awesome
  [[http://www.flycheck.org/en/latest/#the-user-guide][user_guide]] in case I ever decide to really dig into custom tweaks.
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC

* Projectile
  Projectile for navigating project repos
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (setq projectile-switch-project-action #'projectile-commander))
  #+END_SRC

* Out-of-the-box packages
  These are packages that I want to make sure are installed, but are
  basically 1-liners since the defaults are spot-on.
  #+BEGIN_SRC emacs-lisp
    ;; magit for git
    (use-package magit :ensure t)

    ;; try packages out before installing them
    (use-package try :ensure t)

    ;; open a help menu if you pause in the middle
    ;; of a command sequence
    (use-package which-key :ensure t :config (which-key-mode))

    ;; I often use Ag instead of grep
    (use-package ag :ensure t :config (setq ag-highlight-search t))
  #+END_SRC

* Programming languages
** Ruby and Rails
   #+BEGIN_SRC emacs-lisp
     ;; I use rbenv to manage ruby versions, so this package is needed to
     ;; make sure paths are set up properly
     (use-package rbenv :ensure t :config (global-rbenv-mode 1))

     ;; an irb terminal solution for emacs
     (use-package inf-ruby
       :ensure t
       :pin melpa
       :config (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))


     ;; Skip ENV prompt that shows up in some cases.
     (setq inf-ruby-console-environment "development")

     (defun mb/run-ruby ()
       (interactive)
       (require 'inf-ruby)
       (let ((default-directory (projectile-project-root))
             (was-running (get-buffer-process inf-ruby-buffer)))
         ;; This function automatically decides between starting
         ;; a new console or visiting an existing one.
         (inf-ruby-console-auto)
         (when (and (not was-running)
                    (get-buffer-process (current-buffer))))))

     (define-key ruby-mode-map (kbd "C-c M-j")
       #'mb/run-ruby)

     ;; add a mode for running specs
     (use-package rspec-mode
       :ensure t
       :config
       (setq rspec-use-spring-when-possible nil)
       ;; needed for pry/byebug (requires inf-ruby)
       (add-hook 'after-init-hook 'inf-ruby-switch-setup)
       ;; causes the rpsec output to auto-scroll
       (setq compilation-scroll-output t))

     (defadvice rspec-compile (around rspec-compile-around)
       "Use BASH shell for running the specs because of ZSH issues."
       (let ((shell-file-name "/bin/bash"))
         ad-do-it))

     (ad-activate 'rspec-compile)

   #+END_SRC
   
   For `hs-minor-mode` I need to add new ruby block delimiters to get
   folding to work in Ruby classes and spec files.
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "hideshow"
       '(add-to-list 'hs-special-modes-alist
                     `(ruby-mode
                       ,(rx (or "def" "class" "module" "do" "{" "[")) ; Block start
                       ,(rx (or "}" "]" "end"))                  ; Block end
                       ,(rx (or "#" "=begin"))                   ; Comment start
                       ruby-forward-sexp nil)))
   #+END_SRC
** Scheme
   #+BEGIN_SRC emacs-lisp
     ;; add a mode for running specs
     (use-package geiser
       :ensure t)

     ;; Setup geiser and babel
     (require 'scheme)
     (setq geiser-active-implementations '(mit))
     (custom-set-variables
      '(scheme-program-name "mit-scheme"))
   #+END_SRC
** Coffeescript
   #+BEGIN_SRC emacs-lisp
     (use-package coffee-mode
       :ensure t
       :pin melpa
       :config (custom-set-variables '(coffee-tab-width 2)))

     ;; generating sourcemap by '-m' option. And you must set '--no-header' option
     (setq coffee-args-compile '("-c" "--no-header" "-m"))
     (add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)

     ;; If you want to remove sourcemap file after jumping corresponding point
     ;; (defun my/coffee-after-compile-hook (props)
     ;;   (sourcemap-goto-corresponding-point props)
     ;;   (delete-file (plist-get props :sourcemap)))
     ;; (add-hook 'coffee-after-compile-hook 'my/coffee-after-compile-hook)
   #+END_SRC

